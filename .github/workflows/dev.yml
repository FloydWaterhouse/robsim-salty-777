# This is a basic workflow to help you get started with Actions
name: dev-release

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    tags:
    - 'dev'

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # Prevent running this on forks
    if: github.repository_owner == 'RobSimulation'
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    env:
      ROBSIM_PRODUCTION_BUILD: 1
      MASTER_PRE_RELEASE_TAG: dev
      MASTER_ZIP_NAME: masterrob94-salty-777.zip
      BUILD_DIR_NAME: dev

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - name: Checkout source
        uses: actions/checkout@v2
      - name: Set BUILT_DATE_TIME
        run: echo "BUILT_DATE_TIME=$(date -u -Iseconds)" >> $GITHUB_ENV
      - name: Build RobSim-Salty-777
        uses: actions/setup-node@v1
        with:
          node-version: 14
      - run: |
          npm i
          npm run build
      - run: ls -R
      - name: Build ZIP files
        run: |
          mkdir ./${{ env.BUILD_DIR_NAME }}
          cd ./Packages
          zip -r ../${{ env.BUILD_DIR_NAME }}/${{ env.MASTER_ZIP_NAME }} ./masterrob94-salty-777
      - uses: dev-drprasad/delete-tag-and-release@v0.2.0
        with:
          delete_release: true # default: false
          tag_name: ${{ env.MASTER_PRE_RELEASE_TAG }} # tag name to delete
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.MASTER_PRE_RELEASE_TAG }}
          release_name: ${{ env.MASTER_PRE_RELEASE_TAG }}
          draft: false
          prerelease: false
      - name: Upload Release Asset
        id: upload-release-asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: ./${{ env.BUILD_DIR_NAME }}/${{ env.MASTER_ZIP_NAME }}
          asset_name: ${{ env.MASTER_ZIP_NAME }}
          asset_content_type: application/zip
